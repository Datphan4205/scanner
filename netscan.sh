#!/bin/bash

#
# Network Security Scanner Script
# Enhanced to perform live scanning with nmap
#

# Function to write the report header
write_header() {
    local target="$1"
    echo "==============================="
    echo " Network Security Scan Report"
    echo "==============================="
    echo ""
    echo "Target IP/Hostname: $target"
    echo "Scan Date: $(date)"
    echo ""
}

# Function to check if target is alive
is_alive() {
    local target="$1"
    echo "[+] Checking if $target is reachable..."
    
    # Use -c 1 to send only one packet, timeout after 3 seconds
    ping -c 1 -W 3 "$target" > /dev/null 2>&1
    
    if [ "$?" -eq 0 ]; then
        echo "[+] Target is reachable. Proceeding with scan."
        return 0
    else
        echo "[-] Target appears to be unreachable. Continuing scan anyway..." >&2
        return 1
    fi
}

# Function to write ports section with live nmap scan
write_ports_section() {
    local target="$1"
    
    echo "--- Open Ports and Detected Services ---"
    echo ""
    
    # Check if nmap is installed
    if ! command -v nmap &> /dev/null; then
        echo "Error: nmap is not installed. Please install nmap to perform port scanning."
        echo "Falling back to placeholder data:"
        echo "Port 80/tcp - http"
        echo "Port 443/tcp - https" 
        echo "Port 22/tcp - ssh"
        echo ""
        return 1
    fi
    
    echo "[+] Running nmap scan on $target..."
    echo "[+] This may take a moment..."
    echo ""
    
    # Run nmap with service version detection and filter for open ports
    # -sV: Version detection
    # -T4: Aggressive timing template for faster scanning
    # --open: Only show open ports
    nmap -sV -T4 --open "$target" | grep "open"
    
    # Check if nmap command was successful
    if [ "${PIPESTATUS[0]}" -ne 0 ]; then
        echo "Warning: nmap scan encountered an issue, but may have partial results above."
    fi
    
    echo ""
}

# Function to write vulnerabilities section (placeholder for now)
write_vulns_section() {
    echo "--- Potential Vulnerabilities Identified ---"
    echo ""
    echo "- Vulnerability assessment pending"
    echo "- Manual review recommended"
    echo "- Consider running additional security tools"
    echo ""
}

# Function to write recommendations section (placeholder for now)  
write_recs_section() {
    echo "--- Recommendations for Remediation ---"
    echo ""
    echo "- Update all software packages to latest versions"
    echo "- Apply available security patches"
    echo "- Implement proper firewall rules"
    echo "- Review and harden service configurations"
    echo "- Consider implementing intrusion detection systems"
    echo ""
}

# Function to write footer
write_footer() {
    echo "--- End of Report ---"
    echo ""
    echo "Report generated on: $(date)"
    echo "Generated by: Network Security Scanner v2.0"
}

# Display usage information
usage() {
    echo "Usage: $0 <target_ip_or_hostname>"
    echo ""
    echo "Examples:"
    echo "  $0 scanme.nmap.org"
    echo "  $0 127.0.0.1"
    echo "  $0 192.168.1.1"
    echo ""
    echo "Note: This script requires nmap to be installed for live scanning."
    exit 1
}

# Main function to control script flow
main() {
    # Input validation
    if [ "$#" -ne 1 ]; then
        echo "Error: You must provide exactly one target." >&2
        usage
    fi
    
    local target="$1"
    local REPORT_FILE="security_scan_report.txt"
    
    echo "[*] Starting network security scan of: $target"
    echo "[*] Report will be saved to: $REPORT_FILE"
    echo ""
    
    # Optional: Check if target is alive (but continue even if not responsive to ping)
    is_alive "$target"
    
    echo "[*] Generating security report..."
    echo ""
    
    # Generate the complete report
    write_header "$target" > "$REPORT_FILE"
    write_ports_section "$target" >> "$REPORT_FILE"
    write_vulns_section >> "$REPORT_FILE"
    write_recs_section >> "$REPORT_FILE"
    write_footer >> "$REPORT_FILE"
    
    echo "[*] Scan complete! Report saved to: $REPORT_FILE"
    echo ""
    echo "--- Report Preview ---"
    cat "$REPORT_FILE"
}

# Start the script by passing all command-line arguments to main
main "$@"
